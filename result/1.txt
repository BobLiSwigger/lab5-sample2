lno@0	@0	program	children: [@1 @13 ]
lno@2	@1	stmt	declration	children: [@2 @3 @4 @9 @12 ]
lno@2	@2	type	void	
lno@2	@3	vari	f	ID 0	
lno@3	@4	stmt	declration	children: [@5 @6 ]
lno@3	@5	type	int 	
lno@3	@6	expr	=	children: [@7 @8 ]
lno@3	@7	vari	a	ID 2	
lno@3	@8	const	10	
lno@4	@9	expr	+=	children: [@10 @11 ]
lno@4	@10	vari	a	ID 2	
lno@4	@11	const	3	
lno@5	@12	stmt	return	
lno@7	@13	stmt	declration	children: [@14 @15 @16 @20 @23 @26 @29 @33 @93 ]
lno@7	@14	type	void	
lno@7	@15	vari	main	ID 1	
lno@8	@16	stmt	declration	children: [@17 @18 @19 ]
lno@8	@17	type	int 	
lno@8	@18	vari	a	ID 3	
lno@8	@19	vari	s	ID 4	
lno@9	@20	expr	=	children: [@21 @22 ]
lno@9	@21	vari	a	ID 3	
lno@9	@22	const	10	
lno@10	@23	expr	=	children: [@24 @25 ]
lno@10	@24	vari	s	ID 4	
lno@10	@25	const	0	
lno@11	@26	stmt	declration	children: [@27 @28 ]
lno@11	@27	type	char	
lno@11	@28	vari	ch	ID 5	
lno@12	@29	stmt	scanf	children: [@30 @31 ]
lno@12	@30	const	"%d"	
lno@12	@31	expr	&	children: [@32 ]
lno@12	@32	vari	ch	ID 5	
lno@13	@33	stmt	while	children: [@34 @52 @55 @58 @61 @64 ]
lno@13	@34	expr	||	children: [@35 @42 ]
lno@13	@35	expr	&&	children: [@36 @39 ]
lno@13	@36	expr	>	children: [@37 @38 ]
lno@13	@37	vari	a	ID 3	
lno@13	@38	const	0	
lno@13	@39	expr	<=	children: [@40 @41 ]
lno@13	@40	vari	a	ID 3	
lno@13	@41	const	10	
lno@13	@42	expr	&&	children: [@43 @48 ]
lno@13	@43	expr	==	children: [@44 @47 ]
lno@13	@44	expr	%	children: [@45 @46 ]
lno@13	@45	vari	a	ID 3	
lno@13	@46	const	100	
lno@13	@47	const	10	
lno@13	@48	expr	!	children: [@49 ]
lno@13	@49	expr	==	children: [@50 @51 ]
lno@13	@50	vari	a	ID 3	
lno@13	@51	const	10	
lno@14	@52	expr	-=	children: [@53 @54 ]
lno@14	@53	vari	a	ID 3	
lno@14	@54	const	1	
lno@15	@55	stmt	declration	children: [@56 @57 ]
lno@15	@56	type	int 	
lno@15	@57	vari	a	ID 6	
lno@16	@58	expr	=	children: [@59 @60 ]
lno@16	@59	vari	a	ID 6	
lno@16	@60	const	10	
lno@17	@61	expr	+=	children: [@62 @63 ]
lno@17	@62	vari	s	ID 4	
lno@17	@63	vari	a	ID 6	
lno@25	@64	stmt	if	children: [@65 @70 @73 @76 @79 ]
lno@18	@65	expr	<	children: [@66 @68 ]
lno@18	@66	expr	-	children: [@67 ]
lno@18	@67	vari	s	ID 4	
lno@18	@68	expr	-	children: [@69 ]
lno@18	@69	const	10	
lno@19	@70	stmt	printf	children: [@71 @72 ]
lno@19	@71	const	"result is: %d\n"	
lno@19	@72	vari	s	ID 4	
lno@20	@73	stmt	declration	children: [@74 @75 ]
lno@20	@74	type	int 	
lno@20	@75	vari	b	ID 7	
lno@21	@76	expr	=	children: [@77 @78 ]
lno@21	@77	vari	b	ID 7	
lno@21	@78	const	10	
lno@22	@79	stmt	for	children: [@80 @85 @88 @90 ]
lno@22	@80	stmt	declration	children: [@81 @82 ]
lno@22	@81	type	int 	
lno@22	@82	expr	=	children: [@83 @84 ]
lno@22	@83	vari	i	ID 8	
lno@22	@84	const	0	
lno@22	@85	expr	<	children: [@86 @87 ]
lno@22	@86	vari	i	ID 8	
lno@22	@87	vari	b	ID 7	
lno@22	@88	expr	++	children: [@89 ]
lno@22	@89	vari	i	ID 8	
lno@23	@90	stmt	printf	children: [@91 @92 ]
lno@23	@91	const	"Have fun: %d\n"	
lno@23	@92	vari	i	ID 8	
lno@27	@93	stmt	return	
----------------------------Yield----------------------------
0	-1
1	0
2	0
3	2
4	3
5	4
-------------------------Symbol Table-------------------------
ID	name	yield
0	f	0
1	main	0
2	a	1
3	a	2
4	s	2
5	ch	2
6	a	3
7	b	4
8	i	4
